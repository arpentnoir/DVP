
trigger:
  - main
pr:
  - main

parameters:
  - name: ENV
    displayName: Deployment environment
    default: dev
    values:
      - dev
      - test
      - preprod

variables:
  CI: 'true'
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isPR: $[eq(variables['Build.Reason'], 'PullRequest')]
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(System.PullRequest.PullRequestNumber)
    TARGET_BRANCH: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]
    BASE_SHA: main
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(Build.SourceBranchName)
    BASE_SHA: main~1
  HEAD_SHA: $(git rev-parse HEAD)

stages:
  - stage: build_test
    pool:
      vmImage: ubuntu-latest
    variables:
      disable.coverage.autogenerate: true
    jobs:
      - job: test_build
        steps:
          - checkout: self
            fetchDepth: 2
            displayName: Checkout

          - template: .azure-pipelines/steps/install-node-modules.yml

          - script: npx nx workspace-lint
            displayName: "Run nx workspace linting"

          - script: npx nx run-many --target=lint --parallel=3
            displayName: "Run linting"

          - script: npx nx run-many --target=test --parallel=3 --ci --code-coverage
            displayName: "Run tests"

          - script: npx nx run-many --target=build --parallel=3
            displayName: "Run build"

          - task: PublishPipelineArtifact@1
            condition: and(succeeded(), eq(variables.isMain, 'true'))
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/dist/apps/client
              artifactName: "client-build"

          - task: PublishPipelineArtifact@1
            condition: and(succeeded(), eq(variables.isMain, 'true'))
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/dist/apps/api
              artifactName: "api-build"
  - stage: deploy
    dependsOn: build_test
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job: deploy
        steps:
          - task: AzureKeyVault@2
            inputs:
              connectedServiceName: "gs-ha-dvp-serviceconnection"
              keyVaultName: "gs-ha-dvp"
              secretsFilter: "*"
              runAsPreJob: true

          - task: DownloadPipelineArtifact@2
            inputs:
              source: "current" # Options: current, specific
              path: $(System.DefaultWorkingDirectory)/artifacts

          - template: .azure-pipelines/steps/install-node-modules.yml

          - bash: |
              # exit if a command returns a non-zero exit code and also print the commands and their args as they are executed
              set -e -x

              # Download and install required tools pulumi
              rm -rf $HOME/.pulumi
              rm -rf /usr/local/bin/pulumi*
              curl -fsSL https://get.pulumi.com | sh -s -- --version 3.46.0
              /bin/cp -rf $HOME/.pulumi/bin/* /usr/local/bin

              cd apps/infrastructure/policypack && yarn install

            displayName: Install pulumi

          - bash: |
              npx nx run infrastructure:preview --verbose
            displayName: Run `pulumi preview`
            env:
              ENV: ${{ parameters.ENV }}
              AWS_ACCESS_KEY_ID: $(AWS-ACCESS-KEY-ID)
              AWS_SECRET_ACCESS_KEY: $(aws-secret-access-key)

          - bash: |
              npx nx run infrastructure:up --verbose
            displayName: Run `pulumi up`
            env:
              ENV: ${{ parameters.ENV }}
              AWS_ACCESS_KEY_ID: $(AWS-ACCESS-KEY-ID)
              AWS_SECRET_ACCESS_KEY: $(aws-secret-access-key)
