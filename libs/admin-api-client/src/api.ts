/* tslint:disable */
/* eslint-disable */
/**
 * DVP Admin API
 * Admin API for the Digital Verification Platform
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Update document schema request payload
 * @export
 * @interface DocumentSchemaUpdateRequest
 */
export interface DocumentSchemaUpdateRequest {
    /**
     * whether the document schema is disabled on the platform
     * @type {boolean}
     * @memberof DocumentSchemaUpdateRequest
     */
    'disabled'?: boolean;
    /**
     * Enable for all the ABNs, except for the ones in disableForABNs
     * @type {boolean}
     * @memberof DocumentSchemaUpdateRequest
     */
    'enableForAll'?: boolean;
    /**
     * Enable for the ABNs listed, ignored if enableForAll is set
     * @type {Array<string>}
     * @memberof DocumentSchemaUpdateRequest
     */
    'enableForABNs'?: Array<string>;
    /**
     * Disable for the ABNs listed, takes the precedence over enableForAll
     * @type {Array<string>}
     * @memberof DocumentSchemaUpdateRequest
     */
    'disableForABNs'?: Array<string>;
}
/**
 * Document schema
 * @export
 * @interface DocumentSchemaUpdateResponse
 */
export interface DocumentSchemaUpdateResponse {
    /**
     * document schema id
     * @type {string}
     * @memberof DocumentSchemaUpdateResponse
     */
    'schemaId': string;
    /**
     * document schema name
     * @type {string}
     * @memberof DocumentSchemaUpdateResponse
     */
    'name': string;
    /**
     * document schema type
     * @type {string}
     * @memberof DocumentSchemaUpdateResponse
     */
    'type': DocumentSchemaUpdateResponseTypeEnum;
    /**
     * whether the document schema is disabled on the platform
     * @type {boolean}
     * @memberof DocumentSchemaUpdateResponse
     */
    'disabled'?: boolean;
    /**
     * Enable for all the ABNs, except for the ones in disableForABNs
     * @type {boolean}
     * @memberof DocumentSchemaUpdateResponse
     */
    'enableForAll'?: boolean;
    /**
     * Enable for the ABNs listed, ignored if enableForAll is set
     * @type {Array<string>}
     * @memberof DocumentSchemaUpdateResponse
     */
    'enableForABNs'?: Array<string>;
    /**
     * Disable for the ABNs listed, takes the precedence over enableForAll
     * @type {Array<number>}
     * @memberof DocumentSchemaUpdateResponse
     */
    'disableForABNs'?: Array<number>;
}

export const DocumentSchemaUpdateResponseTypeEnum = {
    Full: 'full',
    Partial: 'partial'
} as const;

export type DocumentSchemaUpdateResponseTypeEnum = typeof DocumentSchemaUpdateResponseTypeEnum[keyof typeof DocumentSchemaUpdateResponseTypeEnum];

/**
 * An object containing references to the source of an error.
 * @export
 * @interface ErrorSource
 */
export interface ErrorSource {
    /**
     * A JSON Pointer which describes which property in the request object to which an error message relates.  For more details on JSON pointers see [RFC6901](https://tools.ietf.org/html/rfc6901).
     * @type {string}
     * @memberof ErrorSource
     */
    'pointer'?: string;
    /**
     * Describes the location of the data to which the error message is related.  - **\"REQUEST\"** - Indicates the message relates to a _property_ within the request   object. The `pointer` property should be populated in this case. - **\"QUERY\"** - Indicates the message relates to a _query_ parameter. The `parameter`   property should be populated in this case. - **\"ID\"** - Indicates the message relates to the identifier of the REST resource. The   `parameter` property _may optionally_ be populated in this case.
     * @type {string}
     * @memberof ErrorSource
     */
    'location'?: ErrorSourceLocationEnum;
    /**
     * A string indicating which URI query parameter caused the error.
     * @type {string}
     * @memberof ErrorSource
     */
    'parameter'?: string;
}

export const ErrorSourceLocationEnum = {
    Request: 'REQUEST',
    Query: 'QUERY',
    Id: 'ID'
} as const;

export type ErrorSourceLocationEnum = typeof ErrorSourceLocationEnum[keyof typeof ErrorSourceLocationEnum];

/**
 * A schema for the `errors` array.
 * @export
 * @interface ErrorsArray
 */
export interface ErrorsArray {
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorsArray
     */
    'errors'?: Array<Error>;
}
/**
 * The response returned when one or more errors have been encountered.
 * @export
 * @interface ErrorsResponseSchema
 */
export interface ErrorsResponseSchema {
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorsResponseSchema
     */
    'errors': Array<Error>;
}
/**
 * An object containing the details of a particular error.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * A unique identifier for the error occurrence, to provide traceability in application logs.
     * @type {string}
     * @memberof ModelError
     */
    'id'?: string;
    /**
     * A provider-specific or enterprise defined error code. Codes must be in uppercase.
     * @type {string}
     * @memberof ModelError
     */
    'code': string;
    /**
     * A provider-specific or enterprise defined error message.
     * @type {string}
     * @memberof ModelError
     */
    'detail': string;
    /**
     * 
     * @type {ErrorSource}
     * @memberof ModelError
     */
    'source'?: ErrorSource;
    /**
     * A URL which leads to further details about the error (e.g. A help page).
     * @type {string}
     * @memberof ModelError
     */
    'helpUrl'?: string;
    /**
     * Help text which can provide further assistance on the error.
     * @type {string}
     * @memberof ModelError
     */
    'helpText'?: string;
}

/**
 * DocumentSchemaApi - axios parameter creator
 * @export
 */
export const DocumentSchemaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * update document schema
         * @summary update document schema
         * @param {string} schemaId Document schema id
         * @param {DocumentSchemaUpdateRequest} [documentSchemaUpdateRequest] Parameters updating the document schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentSchema: async (schemaId: string, documentSchemaUpdateRequest?: DocumentSchemaUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schemaId' is not null or undefined
            assertParamExists('updateDocumentSchema', 'schemaId', schemaId)
            const localVarPath = `/document-schemas/{schemaId}`
                .replace(`{${"schemaId"}}`, encodeURIComponent(String(schemaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorizer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentSchemaUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentSchemaApi - functional programming interface
 * @export
 */
export const DocumentSchemaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentSchemaApiAxiosParamCreator(configuration)
    return {
        /**
         * update document schema
         * @summary update document schema
         * @param {string} schemaId Document schema id
         * @param {DocumentSchemaUpdateRequest} [documentSchemaUpdateRequest] Parameters updating the document schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDocumentSchema(schemaId: string, documentSchemaUpdateRequest?: DocumentSchemaUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentSchemaUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDocumentSchema(schemaId, documentSchemaUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentSchemaApi - factory interface
 * @export
 */
export const DocumentSchemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentSchemaApiFp(configuration)
    return {
        /**
         * update document schema
         * @summary update document schema
         * @param {string} schemaId Document schema id
         * @param {DocumentSchemaUpdateRequest} [documentSchemaUpdateRequest] Parameters updating the document schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentSchema(schemaId: string, documentSchemaUpdateRequest?: DocumentSchemaUpdateRequest, options?: any): AxiosPromise<DocumentSchemaUpdateResponse> {
            return localVarFp.updateDocumentSchema(schemaId, documentSchemaUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentSchemaApi - interface
 * @export
 * @interface DocumentSchemaApi
 */
export interface DocumentSchemaApiInterface {
    /**
     * update document schema
     * @summary update document schema
     * @param {string} schemaId Document schema id
     * @param {DocumentSchemaUpdateRequest} [documentSchemaUpdateRequest] Parameters updating the document schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSchemaApiInterface
     */
    updateDocumentSchema(schemaId: string, documentSchemaUpdateRequest?: DocumentSchemaUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentSchemaUpdateResponse>;

}

/**
 * DocumentSchemaApi - object-oriented interface
 * @export
 * @class DocumentSchemaApi
 * @extends {BaseAPI}
 */
export class DocumentSchemaApi extends BaseAPI implements DocumentSchemaApiInterface {
    /**
     * update document schema
     * @summary update document schema
     * @param {string} schemaId Document schema id
     * @param {DocumentSchemaUpdateRequest} [documentSchemaUpdateRequest] Parameters updating the document schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentSchemaApi
     */
    public updateDocumentSchema(schemaId: string, documentSchemaUpdateRequest?: DocumentSchemaUpdateRequest, options?: AxiosRequestConfig) {
        return DocumentSchemaApiFp(this.configuration).updateDocumentSchema(schemaId, documentSchemaUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


