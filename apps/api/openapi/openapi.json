{
  "openapi": "3.0.0",
  "info": {
    "version": "0.1",
    "title": "DVP",
    "description": "API for the Digital Verification Platform"
  },
  "servers": [
    {
      "url": "http://localhost:3333/api",
      "description": "Local environment"
    },
    {
      "url": "https://api.dev.dvp.ha.showthething.com/api",
      "description": "Development environment"
    }
  ],
  "paths": {
    "/storage/documents": {
      "post": {
        "summary": "encrypt and upload document",
        "operationId": "uploadDocument",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentUploadRequest"
              }
            }
          },
          "description": "Parameters uploading the document"
        },
        "responses": {
          "200": {
            "description": "Successfully uploaded the document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentUploadResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/storage/documents/{documentId}": {
      "get": {
        "summary": "Get encrypted document by Id",
        "operationId": "getDocument",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "description": "The encrypted documents object Id",
            "example": "77879ba6-9aaf-4895-9e1c-794e4a3653fe",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptedDocumentObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/credentials": {
      "get": {
        "summary": "List all the issued credentials",
        "description": "List all the issued credentials",
        "tags": ["Credentials"],
        "operationId": "getCredentials",
        "parameters": [
          {
            "in": "query",
            "name": "nextCursor",
            "schema": {
              "type": "string"
            },
            "description": "Starting key for the next result set. If you don't pass a nextCursor parameter, but do pass a limit parameter, the default value retrieves the first portion (or \"page\") of results."
          },
          {
            "in": "query",
            "name": "prevCursor",
            "schema": {
              "type": "string"
            },
            "description": "Starting key for the previous result set. If you pass prevCursor and nextCursor together, nextCursor takes precedence"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "maximum": 100
            },
            "description": "The numbers of items to return"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "description": "Searches for the query string in the searchable fields"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "description": "The supported sort directions are either `asc` for ascending or `desc` for descending. If a sort direction is not specified, then order will default to `asc`",
            "example": "desc"
          }
        ],
        "responses": {
          "200": {
            "description": "List of issued crdentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/credentials/issue": {
      "post": {
        "summary": "Issues a credential and returns it in the response body.",
        "tags": ["Credentials"],
        "operationId": "issueCredential",
        "description": "Issues a credential and returns it in the response body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueCredentialRequest"
              }
            }
          },
          "description": "Parameters for issuing the credential."
        },
        "responses": {
          "201": {
            "description": "Credential successfully issued!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueCredentialResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/credentials/verify": {
      "post": {
        "summary": "Verifies a verifiableCredential and returns a verificationResult in the response body.",
        "tags": ["Credentials"],
        "operationId": "verifyCredential",
        "description": "Verifies a verifiableCredential and returns a verificationResult in the response body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCredentialRequest"
              }
            }
          },
          "description": "Parameters for verifying a verifiableCredential."
        },
        "responses": {
          "200": {
            "description": "Verifiable Credential successfully verified!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/credentials/validate": {
      "post": {
        "summary": "Validates the credentialSubject and returns any errors in the response body.",
        "tags": ["Credentials"],
        "operationId": "validateCredential",
        "description": "Validates the credentialSubject and returns any errors in the response body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateCredentialRequest"
              }
            }
          },
          "description": "Parameters for validating a credentialSubject."
        },
        "responses": {
          "200": {
            "description": "Successfully valdiated!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateCredentialResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad User Input",
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "422": {
            "description": "Validation Error",
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Id": {
        "type": "string",
        "format": "uuid",
        "example": "77879ba6-9aaf-4895-9e1c-794e4a3653fe"
      },
      "ErrorSource": {
        "description": "An object containing references to the source of an error.",
        "type": "object",
        "properties": {
          "pointer": {
            "description": "A JSON Pointer which describes which property in the request object to which an error\nmessage relates.\n\nFor more details on JSON pointers see [RFC6901](https://tools.ietf.org/html/rfc6901).",
            "type": "string"
          },
          "location": {
            "description": "Describes the location of the data to which the error message is related.\n\n- **\"REQUEST\"** - Indicates the message relates to a _property_ within the request\n  object. The `pointer` property should be populated in this case.\n- **\"QUERY\"** - Indicates the message relates to a _query_ parameter. The `parameter`\n  property should be populated in this case.\n- **\"ID\"** - Indicates the message relates to the identifier of the REST resource. The\n  `parameter` property _may optionally_ be populated in this case.",
            "type": "string",
            "enum": ["REQUEST", "QUERY", "ID"]
          },
          "parameter": {
            "description": "A string indicating which URI query parameter caused the error.",
            "type": "string"
          }
        }
      },
      "Error": {
        "description": "An object containing the details of a particular error.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the error occurrence, to provide traceability in application logs.",
            "type": "string"
          },
          "code": {
            "description": "A provider-specific or enterprise defined error code. Codes must be in uppercase.",
            "type": "string",
            "example": "DVP0003"
          },
          "detail": {
            "description": "A provider-specific or enterprise defined error message.",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ErrorSource"
          },
          "helpUrl": {
            "description": "A URL which leads to further details about the error (e.g. A help page).",
            "type": "string"
          },
          "helpText": {
            "description": "Help text which can provide further assistance on the error.",
            "type": "string"
          }
        },
        "required": ["code", "detail"],
        "example": {
          "id": "123-4",
          "code": "DVP0003",
          "message": "The 'Decryption Key' is not valid.",
          "source": {
            "pointer": "decryptionKey",
            "helpLocation": "REQUEST"
          }
        }
      },
      "ErrorsArray": {
        "description": "A schema for the `errors` array.",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ErrorsResponseSchema": {
        "description": "The response returned when one or more errors have been encountered.",
        "type": "object",
        "required": ["errors"],
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorsArray"
          }
        ]
      },
      "DocumentUploadResponse": {
        "type": "object",
        "required": ["documentId", "encryptionKey"],
        "properties": {
          "documentId": {
            "$ref": "#/components/schemas/Id"
          },
          "encryptionKey": {
            "type": "string",
            "example": "04d49fe8ac0a0afa5e9e2fa617551b5d7be532d0c8586a0809d7d223316d7cc5",
            "description": "Key used for encryption"
          }
        }
      },
      "DocumentUploadRequest": {
        "type": "object",
        "required": ["document"],
        "properties": {
          "document": {
            "type": "string",
            "description": "strigified document to upload"
          },
          "documentId": {
            "$ref": "#/components/schemas/Id"
          },
          "encryptionKey": {
            "type": "string",
            "example": "04d49fe8ac0a0afa5e9e2fa617551b5d7be532d0c8586a0809d7d223316d7cc5",
            "description": "Key used for encryption"
          }
        }
      },
      "EncryptedDocumentObject": {
        "type": "object",
        "required": ["document"],
        "properties": {
          "document": {
            "type": "object",
            "required": ["cipherText", "iv", "tag", "type"],
            "properties": {
              "cipherText": {
                "type": "string",
                "example": "HSKcfell3ocggQDfvg4CRHNptlfleWW3DEcdBbouFoS5Sp0STZmU2ddmchLcinsxYBkN+VFrFNhC3ws1vB6HEWq/mmz+7Vl0HRiBnC8NP4iZFEdbDelCuyfEoRLVenFXcQu2LnBB63aqicvNhzOs1p/dJQnmkr5zxR3vW0MgH+Xi8/NY+lOUu0+TTDs8S4AkhO3BsX1TnS8eWpjImDUxNDTA7tDiyx0m2Ns+EbqJY1q/wi5Wq1vqezpOLaBiAn4TJ4zYARU1BeiCbBGSaCKPtLZPhFYd9EeCTghqdgVqyL8ZuVONYELgvUATvtqJiOqTxkAVm2H9EoKzmP9hzwCW4r3JOl/glaST+IdXfq/aSxqUVbobLH4q7Ho7gNTM5wnvjmhpfo+K6ycsfTyHLvBGQqnITlH0+RnXsSTimxdmEPShG0ER8ul+5d8e68oozZntB6bkM3TxoZJ8idh2",
                "description": "Encrypted verifiable credential"
              },
              "iv": {
                "type": "string",
                "example": "LKwFbAzol64l0OyN",
                "description": "Initialisation vector"
              },
              "tag": {
                "type": "string",
                "example": "EOH28x8yC2pJDFCX/wVhqg==",
                "description": "Message authentication code (MAC)"
              },
              "type": {
                "type": "string",
                "example": "OPEN-ATTESTATION-TYPE-1",
                "description": "Encryption algorithm identifier (OA)"
              }
            }
          }
        }
      },
      "CredentialsResponseItem": {
        "type": "object",
        "description": "issued credential metadata",
        "properties": {
          "id": {
            "type": "string"
          },
          "documentNumber": {
            "type": "string"
          },
          "freeTradeAgreement": {
            "type": "string"
          },
          "importingJurisdiction": {
            "type": "string"
          },
          "exporterOrManufacturerAbn": {
            "type": "string"
          },
          "importerName": {
            "type": "string"
          },
          "consignmentReferenceNumber": {
            "type": "string"
          },
          "documentDeclaration": {
            "type": "boolean"
          },
          "issueDate": {
            "type": "string",
            "description": "The issue date"
          },
          "expiryDate": {
            "type": "string",
            "description": "The expiry date"
          }
        }
      },
      "CredentialsResponse": {
        "type": "object",
        "description": "List of issued credentials",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialsResponseItem"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "Credential": {
        "type": "object",
        "required": [
          "@context",
          "type",
          "credentialSubject",
          "issuer",
          "issuanceDate"
        ],
        "description": "A JSON-LD Verifiable Credential without a proof.",
        "additionalProperties": true,
        "properties": {
          "@context": {
            "type": "array",
            "description": "The JSON-LD context of the credential.",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "The ID of the credential."
          },
          "type": {
            "type": "array",
            "description": "The JSON-LD type of the credential.",
            "items": {
              "type": "string"
            }
          },
          "issuanceDate": {
            "type": "string",
            "description": "The issuanceDate"
          },
          "expirationDate": {
            "type": "string",
            "description": "The expirationDate"
          },
          "credentialSubject": {
            "type": "object",
            "description": "The subject"
          },
          "issuer": {
            "$ref": "#/components/schemas/Issuer"
          }
        },
        "example": {
          "@context": [
            "https://www.w3.org/2018/credentials/v1",
            "https://www.w3.org/2018/credentials/examples/v1"
          ],
          "id": "http://example.gov/credentials/3733",
          "type": ["VerifiableCredential", "UniversityDegreeCredential"],
          "issuer": "did:example:123",
          "issuanceDate": "2020-03-16T22:37:26.544Z",
          "credentialSubject": {
            "id": "did:example:123",
            "degree": {
              "type": "BachelorDegree",
              "name": "Bachelor of Science and Arts"
            }
          }
        }
      },
      "Issuer": {
        "description": "A JSON-LD Verifiable Credential Issuer.",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "required": ["id"],
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        ],
        "example": {
          "id": "did:key:z6MkjRagNiMu91DduvCvgEsqLZDVzrJzFrwahc4tXLt9DoHd"
        }
      },
      "LinkedDataProof": {
        "type": "object",
        "description": "A JSON-LD Linked Data proof.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Linked Data Signature Suite used to produce proof."
          },
          "created": {
            "type": "string",
            "description": "Date the proof was created."
          },
          "challenge": {
            "type": "string",
            "description": "A value chosen by the verifier to mitigate authentication proof replay attacks."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the proof to restrict its use to a particular target."
          },
          "nonce": {
            "type": "string",
            "description": "A value chosen by the creator of a proof to randomize proof values for privacy purposes."
          },
          "verificationMethod": {
            "type": "string",
            "description": "Verification Method used to verify proof."
          },
          "proofPurpose": {
            "type": "string",
            "description": "The purpose of the proof to be used with verificationMethod."
          },
          "jws": {
            "type": "string",
            "description": "Detached JSON Web Signature."
          },
          "proofValue": {
            "type": "string",
            "description": "Value of the Linked Data proof."
          }
        },
        "example": {
          "type": "Ed25519Signature2018",
          "created": "2020-04-02T18:28:08Z",
          "verificationMethod": "did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN",
          "proofPurpose": "assertionMethod",
          "jws": "eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA"
        }
      },
      "IssueCredentialRequest": {
        "type": "object",
        "required": ["credential"],
        "properties": {
          "signingMethod": {
            "type": "string",
            "enum": ["SVIP", "OA"],
            "default": "OA"
          },
          "credential": {
            "$ref": "#/components/schemas/Credential"
          }
        }
      },
      "IssueCredentialResponse": {
        "type": "object",
        "properties": {
          "verifiableCredential": {
            "$ref": "#/components/schemas/VerifiableCredential"
          }
        }
      },
      "VerifyCredentialRequest": {
        "type": "object",
        "properties": {
          "verifiableCredential": {
            "$ref": "#/components/schemas/VerifiableCredential"
          }
        }
      },
      "ValidateCredentialRequest": {
        "type": "object",
        "required": ["schemaType", "verifiableCredential"],
        "properties": {
          "schemaType": {
            "type": "string"
          },
          "verifiableCredential": {
            "$ref": "#/components/schemas/VerifiableCredential"
          }
        }
      },
      "ValidateCredentialResponse": {
        "type": "object"
      },
      "VerificationResult": {
        "type": "object",
        "additionalProperties": false,
        "description": "Object summarizing a verification",
        "properties": {
          "checks": {
            "type": "array",
            "description": "The checks performed",
            "items": {
              "type": "string"
            }
          },
          "warnings": {
            "type": "array",
            "description": "Warnings",
            "items": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "description": "Errors",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "checks": ["proof"],
          "warnings": [],
          "errors": []
        }
      },
      "VerifyCredentialResponse": {
        "$ref": "#/components/schemas/VerificationResult"
      },
      "VerifiableCredential": {
        "type": "object",
        "description": "A JSON-LD Verifiable Credential with a proof.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Credential"
          },
          {
            "type": "object",
            "properties": {
              "proof": {
                "$ref": "#/components/schemas/LinkedDataProof"
              }
            }
          }
        ],
        "example": {
          "@context": [
            "https://www.w3.org/2018/credentials/v1",
            "https://www.w3.org/2018/credentials/examples/v1"
          ],
          "id": "http://example.gov/credentials/3732",
          "type": ["VerifiableCredential", "UniversityDegreeCredential"],
          "issuer": "did:example:1234",
          "issuanceDate": "2020-03-16T22:37:26.544Z",
          "credentialSubject": {
            "id": "did:example:1234",
            "degree": {
              "type": "BachelorDegree",
              "name": "Bachelor of Science and Arts"
            }
          },
          "proof": {
            "type": "Ed25519Signature2018",
            "created": "2020-04-02T18:28:08Z",
            "verificationMethod": "did:example:1234#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN",
            "proofPurpose": "assertionMethod",
            "jws": "eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "description": "Pagination data object",
        "properties": {
          "nextCursor": {
            "type": "string"
          },
          "prevCursor": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          }
        }
      }
    },
    "responses": {
      "GenericErrorResponse": {
        "description": "One or more error(s) were encountered processing the request.\n\nThis response contains a collection of errors encountered while processing the request.",
        "headers": {},
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorsResponseSchema"
            },
            "examples": {
              "systemTimeout": {
                "$ref": "#/components/examples/ErrorResponseExample"
              }
            }
          }
        }
      },
      "ValidationErrorResponse": {
        "description": "One or more error(s) were encountered processing the request.\n\nThis response contains a collection of errors encountered while processing the request.",
        "headers": {},
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorsResponseSchema"
            },
            "examples": {
              "systemTimeout": {
                "$ref": "#/components/examples/ErrorResponseExample"
              }
            }
          }
        }
      },
      "BadRequestErrorResponse": {
        "description": "The request could not be understood by the server due to malformed syntax.\n\nThe client **SHOULD NOT** repeat the request without modifications.",
        "headers": {},
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorsResponseSchema"
            },
            "examples": {
              "badRequestError": {
                "$ref": "#/components/examples/BadRequestErrorExample"
              }
            }
          }
        }
      },
      "AuthorizationErrorResponse": {
        "description": "Client Error - Unauthorized.\n\nMissing or invalid `Authorization` header.",
        "headers": {},
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorsResponseSchema"
            },
            "examples": {
              "authorizationError": {
                "$ref": "#/components/examples/AuthorizationErrorExample"
              }
            }
          }
        }
      },
      "ForbiddenErrorResponse": {
        "description": "Client Error - Forbidden.\n\nOperation not allowed.",
        "headers": {},
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorsResponseSchema"
            },
            "examples": {
              "forbiddenError": {
                "$ref": "#/components/examples/ForbiddenErrorExample"
              }
            }
          }
        }
      },
      "ResourceNotFoundErrorResponse": {
        "description": "The requested resource could not be found but may be available in the future. \n\nSubsequent requests by the client are permissible.",
        "headers": {},
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorsResponseSchema"
            },
            "examples": {
              "notFoundError": {
                "$ref": "#/components/examples/NotFoundErrorExample"
              }
            }
          }
        }
      },
      "MethodNotAllowedErrorResponse": {
        "description": "Client Error - Method Not Allowed.\n\nA request method (**GET**, **POST**, **DELETE**, etc) is not supported for the requested\nresource.",
        "headers": {},
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorsResponseSchema"
            },
            "examples": {
              "methodNotAllowed": {
                "$ref": "#/components/examples/MethodNotAllowedErrorExample"
              }
            }
          }
        }
      },
      "RequestTimeoutErrorResponse": {
        "description": "Client Error - Request Timeout.\n\nThe server timed out waiting for the client request.",
        "headers": {}
      },
      "UnsupportedMediaTypeErrorResponse": {
        "description": "Client Error - Unsupported Media Type.\n\nThe request entity has a media type which the server or resource does not support.",
        "headers": {}
      },
      "TooManyRequestsErrorResponse": {
        "description": "Client Error - To Many Requests.\n\nThe client has sent too many requests in a given amount of time.",
        "headers": {}
      },
      "InternalServerErrorResponse": {
        "description": "Server Error - Internal Server Error. \n\nA generic error message, given when an unexpected condition was encountered while the server\nwas processing the request.",
        "headers": {},
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorsResponseSchema"
            },
            "examples": {
              "systemTimeout": {
                "$ref": "#/components/examples/ErrorResponseExample"
              }
            }
          }
        }
      },
      "NotImplementedErrorResponse": {
        "description": "Server Error - Not Implemented. \n\nThe server either does not recognize the request method, or it lacks the ability to fulfill\nthe request. \n\nUsually this implies future availability (e.g. A new feature of a web-service API).",
        "headers": {}
      }
    },
    "examples": {
      "ErrorResponseExample": {
        "description": "An example of an ERROR (`500`) error.\n\nThis can be returned when the **API** encounters an internal error.",
        "value": {
          "errors": [
            {
              "id": "34910168-ff90-410f-a684-8eb89b876ab6",
              "code": "DVPAPI-001",
              "detail": "System Unavailable.  Try again later."
            }
          ]
        }
      },
      "NotFoundErrorExample": {
        "description": "An example of a NOT FOUND (`404`) error.\n\nThis can be returned when a **GET** / **PUT** / **DELETE** request is made for a resource\nthat does not exist.",
        "value": {
          "errors": [
            {
              "id": "7773a6c1-ad84-4e88-a299-4c257a66a601",
              "code": "DVPAPI-002",
              "detail": "Cannot find resource `/storage/documents/6933bbcb-422f-4135-be13-74677a80dbde`",
              "source": {
                "location": "ID",
                "parameter": "6933bbcb-422f-4135-be13-74677a80dbde"
              }
            }
          ]
        }
      },
      "BadRequestErrorExample": {
        "description": "An example of a NOT UNDERSTOOD / BAD REQUEST (`400`) error.\n\nThis can be returned when a **API** call is made with malformed syntax.",
        "value": {
          "errors": [
            {
              "id": "22af5d37-531c-4515-8f91-963249d3744a",
              "code": "DVPAPI-003",
              "detail": "Missing field in schema POSTed to resource `/storage/documents/6d343ddd-ef1a-4ec3-8bcd-b833295c239a`",
              "source": {
                "location": "REQUEST",
                "parameter": "/decryptionKey"
              }
            }
          ]
        }
      },
      "AuthorizationErrorExample": {
        "description": "An example of an AUTHORIZATION (`401`) error.\n\nThis can be returned when an **API** call does not contain an `Authorization`\nheader.",
        "value": {
          "errors": [
            {
              "id": "6d343ddd-ef1a-4ec3-8bcd-b833295c239a",
              "code": "DVPAPI-004",
              "detail": "Missing \"Authorization\" Header.",
              "source": {
                "pointer": "Authorization",
                "location": "QUERY"
              }
            }
          ]
        }
      },
      "ForbiddenErrorExample": {
        "description": "An example of a FORBIDDEN (`403`) error.\n\nThis can be returned when an **API** submission is not permitted for a client with\na given `Authorization` header.",
        "value": {
          "errors": [
            {
              "id": "1cdd29dd-a475-4aa7-8c9b-3c9843807ab7",
              "code": "DVPAPI-005",
              "detail": "Unable to perform POST to /credentials/issue for ABN 17-376-225-834"
            }
          ]
        }
      },
      "MethodNotAllowedErrorExample": {
        "description": "An example of a METHOD NOT ALLOWED (`405`) error.\n\nThis can be returned when **GET** / **POST** / ** PUT** / **DELETE** request for is made for\na resource that does not support **GET** / **POST** / ** PUT** / **DELETE**.",
        "value": {
          "errors": [
            {
              "id": "46b1472a-4b19-47bb-91ad-701d38183e94",
              "code": "DVPAPI-006",
              "detail": "Cannot DELETE resource `/storage/documents`"
            }
          ]
        }
      }
    }
  }
}
